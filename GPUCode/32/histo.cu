#include <stdio.h>
#include "histo.h"

__global__ void histo_kernel(int histo_size, double reqNumThreads, int numPixPerThread, int numElemPerThread, int imgDataBufferSize, float *dev_imgDataBuffer, int nbBinsPerDim, int binSize, int *dev_histo){
    int stride = 0;
	int const part_histo_size = 12288;
	 int stride_offset = part_histo_size;
	 int histo_count = 1;

	__shared__ int temp_histo[part_histo_size];

	while(histo_count <= (((histo_size - 1)/part_histo_size)+1)){
    	temp_histo[threadIdx.x * 384] = 0;
    	temp_histo[threadIdx.x * 384 + 1] = 0;
    	temp_histo[threadIdx.x * 384 + 2] = 0;
    	temp_histo[threadIdx.x * 384 + 3] = 0;
    	temp_histo[threadIdx.x * 384 + 4] = 0;
    	temp_histo[threadIdx.x * 384 + 5] = 0;
    	temp_histo[threadIdx.x * 384 + 6] = 0;
    	temp_histo[threadIdx.x * 384 + 7] = 0;
    	temp_histo[threadIdx.x * 384 + 8] = 0;
    	temp_histo[threadIdx.x * 384 + 9] = 0;
    	temp_histo[threadIdx.x * 384 + 10] = 0;
    	temp_histo[threadIdx.x * 384 + 11] = 0;
    	temp_histo[threadIdx.x * 384 + 12] = 0;
    	temp_histo[threadIdx.x * 384 + 13] = 0;
    	temp_histo[threadIdx.x * 384 + 14] = 0;
    	temp_histo[threadIdx.x * 384 + 15] = 0;
    	temp_histo[threadIdx.x * 384 + 16] = 0;
    	temp_histo[threadIdx.x * 384 + 17] = 0;
    	temp_histo[threadIdx.x * 384 + 18] = 0;
    	temp_histo[threadIdx.x * 384 + 19] = 0;
    	temp_histo[threadIdx.x * 384 + 20] = 0;
    	temp_histo[threadIdx.x * 384 + 21] = 0;
    	temp_histo[threadIdx.x * 384 + 22] = 0;
    	temp_histo[threadIdx.x * 384 + 23] = 0;
    	temp_histo[threadIdx.x * 384 + 24] = 0;
    	temp_histo[threadIdx.x * 384 + 25] = 0;
    	temp_histo[threadIdx.x * 384 + 26] = 0;
    	temp_histo[threadIdx.x * 384 + 27] = 0;
    	temp_histo[threadIdx.x * 384 + 28] = 0;
    	temp_histo[threadIdx.x * 384 + 29] = 0;
    	temp_histo[threadIdx.x * 384 + 30] = 0;
    	temp_histo[threadIdx.x * 384 + 31] = 0;
    	temp_histo[threadIdx.x * 384 + 32] = 0;
    	temp_histo[threadIdx.x * 384 + 33] = 0;
    	temp_histo[threadIdx.x * 384 + 34] = 0;
    	temp_histo[threadIdx.x * 384 + 35] = 0;
    	temp_histo[threadIdx.x * 384 + 36] = 0;
    	temp_histo[threadIdx.x * 384 + 37] = 0;
    	temp_histo[threadIdx.x * 384 + 38] = 0;
    	temp_histo[threadIdx.x * 384 + 39] = 0;
    	temp_histo[threadIdx.x * 384 + 40] = 0;
    	temp_histo[threadIdx.x * 384 + 41] = 0;
    	temp_histo[threadIdx.x * 384 + 42] = 0;
    	temp_histo[threadIdx.x * 384 + 43] = 0;
    	temp_histo[threadIdx.x * 384 + 44] = 0;
    	temp_histo[threadIdx.x * 384 + 45] = 0;
    	temp_histo[threadIdx.x * 384 + 46] = 0;
    	temp_histo[threadIdx.x * 384 + 47] = 0;
    	temp_histo[threadIdx.x * 384 + 48] = 0;
    	temp_histo[threadIdx.x * 384 + 49] = 0;
    	temp_histo[threadIdx.x * 384 + 50] = 0;
    	temp_histo[threadIdx.x * 384 + 51] = 0;
    	temp_histo[threadIdx.x * 384 + 52] = 0;
    	temp_histo[threadIdx.x * 384 + 53] = 0;
    	temp_histo[threadIdx.x * 384 + 54] = 0;
    	temp_histo[threadIdx.x * 384 + 55] = 0;
    	temp_histo[threadIdx.x * 384 + 56] = 0;
    	temp_histo[threadIdx.x * 384 + 57] = 0;
    	temp_histo[threadIdx.x * 384 + 58] = 0;
    	temp_histo[threadIdx.x * 384 + 59] = 0;
    	temp_histo[threadIdx.x * 384 + 60] = 0;
    	temp_histo[threadIdx.x * 384 + 61] = 0;
    	temp_histo[threadIdx.x * 384 + 62] = 0;
    	temp_histo[threadIdx.x * 384 + 63] = 0;
    	temp_histo[threadIdx.x * 384 + 64] = 0;
    	temp_histo[threadIdx.x * 384 + 65] = 0;
    	temp_histo[threadIdx.x * 384 + 66] = 0;
    	temp_histo[threadIdx.x * 384 + 67] = 0;
    	temp_histo[threadIdx.x * 384 + 68] = 0;
    	temp_histo[threadIdx.x * 384 + 69] = 0;
    	temp_histo[threadIdx.x * 384 + 70] = 0;
    	temp_histo[threadIdx.x * 384 + 71] = 0;
    	temp_histo[threadIdx.x * 384 + 72] = 0;
    	temp_histo[threadIdx.x * 384 + 73] = 0;
    	temp_histo[threadIdx.x * 384 + 74] = 0;
    	temp_histo[threadIdx.x * 384 + 75] = 0;
    	temp_histo[threadIdx.x * 384 + 76] = 0;
    	temp_histo[threadIdx.x * 384 + 77] = 0;
    	temp_histo[threadIdx.x * 384 + 78] = 0;
    	temp_histo[threadIdx.x * 384 + 79] = 0;
    	temp_histo[threadIdx.x * 384 + 80] = 0;
    	temp_histo[threadIdx.x * 384 + 81] = 0;
    	temp_histo[threadIdx.x * 384 + 82] = 0;
    	temp_histo[threadIdx.x * 384 + 83] = 0;
    	temp_histo[threadIdx.x * 384 + 84] = 0;
    	temp_histo[threadIdx.x * 384 + 85] = 0;
    	temp_histo[threadIdx.x * 384 + 86] = 0;
    	temp_histo[threadIdx.x * 384 + 87] = 0;
    	temp_histo[threadIdx.x * 384 + 88] = 0;
    	temp_histo[threadIdx.x * 384 + 89] = 0;
    	temp_histo[threadIdx.x * 384 + 90] = 0;
    	temp_histo[threadIdx.x * 384 + 91] = 0;
    	temp_histo[threadIdx.x * 384 + 92] = 0;
    	temp_histo[threadIdx.x * 384 + 93] = 0;
    	temp_histo[threadIdx.x * 384 + 95] = 0;
    	temp_histo[threadIdx.x * 384 + 96] = 0;
    	temp_histo[threadIdx.x * 384 + 97] = 0;
    	temp_histo[threadIdx.x * 384 + 98] = 0;
    	temp_histo[threadIdx.x * 384 + 99] = 0;
    	temp_histo[threadIdx.x * 384 + 100] = 0;
    	temp_histo[threadIdx.x * 384 + 101] = 0;
    	temp_histo[threadIdx.x * 384 + 102] = 0;
    	temp_histo[threadIdx.x * 384 + 103] = 0;
    	temp_histo[threadIdx.x * 384 + 104] = 0;
    	temp_histo[threadIdx.x * 384 + 105] = 0;
    	temp_histo[threadIdx.x * 384 + 106] = 0;
    	temp_histo[threadIdx.x * 384 + 107] = 0;
    	temp_histo[threadIdx.x * 384 + 108] = 0;
    	temp_histo[threadIdx.x * 384 + 109] = 0;
    	temp_histo[threadIdx.x * 384 + 110] = 0;
    	temp_histo[threadIdx.x * 384 + 111] = 0;
    	temp_histo[threadIdx.x * 384 + 112] = 0;
    	temp_histo[threadIdx.x * 384 + 113] = 0;
    	temp_histo[threadIdx.x * 384 + 114] = 0;
    	temp_histo[threadIdx.x * 384 + 115] = 0;
    	temp_histo[threadIdx.x * 384 + 116] = 0;
    	temp_histo[threadIdx.x * 384 + 117] = 0;
    	temp_histo[threadIdx.x * 384 + 118] = 0;
    	temp_histo[threadIdx.x * 384 + 119] = 0;
    	temp_histo[threadIdx.x * 384 + 120] = 0;
    	temp_histo[threadIdx.x * 384 + 121] = 0;
    	temp_histo[threadIdx.x * 384 + 122] = 0;
    	temp_histo[threadIdx.x * 384 + 123] = 0;
    	temp_histo[threadIdx.x * 384 + 124] = 0;
    	temp_histo[threadIdx.x * 384 + 125] = 0;
    	temp_histo[threadIdx.x * 384 + 126] = 0;
    	temp_histo[threadIdx.x * 384 + 127] = 0;
    	temp_histo[threadIdx.x * 384 + 128] = 0;
    	temp_histo[threadIdx.x * 384 + 129] = 0;
    	temp_histo[threadIdx.x * 384 + 130] = 0;
    	temp_histo[threadIdx.x * 384 + 131] = 0;
    	temp_histo[threadIdx.x * 384 + 132] = 0;
    	temp_histo[threadIdx.x * 384 + 133] = 0;
    	temp_histo[threadIdx.x * 384 + 134] = 0;
    	temp_histo[threadIdx.x * 384 + 135] = 0;
    	temp_histo[threadIdx.x * 384 + 136] = 0;
    	temp_histo[threadIdx.x * 384 + 137] = 0;
    	temp_histo[threadIdx.x * 384 + 138] = 0;
    	temp_histo[threadIdx.x * 384 + 139] = 0;
    	temp_histo[threadIdx.x * 384 + 140] = 0;
    	temp_histo[threadIdx.x * 384 + 141] = 0;
    	temp_histo[threadIdx.x * 384 + 142] = 0;
    	temp_histo[threadIdx.x * 384 + 143] = 0;
    	temp_histo[threadIdx.x * 384 + 144] = 0;
    	temp_histo[threadIdx.x * 384 + 145] = 0;
    	temp_histo[threadIdx.x * 384 + 146] = 0;
    	temp_histo[threadIdx.x * 384 + 147] = 0;
    	temp_histo[threadIdx.x * 384 + 148] = 0;
    	temp_histo[threadIdx.x * 384 + 149] = 0;
    	temp_histo[threadIdx.x * 384 + 150] = 0;
    	temp_histo[threadIdx.x * 384 + 151] = 0;
    	temp_histo[threadIdx.x * 384 + 152] = 0;
    	temp_histo[threadIdx.x * 384 + 153] = 0;
    	temp_histo[threadIdx.x * 384 + 154] = 0;
    	temp_histo[threadIdx.x * 384 + 155] = 0;
    	temp_histo[threadIdx.x * 384 + 156] = 0;
    	temp_histo[threadIdx.x * 384 + 157] = 0;
    	temp_histo[threadIdx.x * 384 + 158] = 0;
    	temp_histo[threadIdx.x * 384 + 159] = 0;
    	temp_histo[threadIdx.x * 384 + 160] = 0;
    	temp_histo[threadIdx.x * 384 + 161] = 0;
    	temp_histo[threadIdx.x * 384 + 162] = 0;
    	temp_histo[threadIdx.x * 384 + 163] = 0;
    	temp_histo[threadIdx.x * 384 + 164] = 0;
    	temp_histo[threadIdx.x * 384 + 165] = 0;
    	temp_histo[threadIdx.x * 384 + 166] = 0;
    	temp_histo[threadIdx.x * 384 + 167] = 0;
    	temp_histo[threadIdx.x * 384 + 168] = 0;
    	temp_histo[threadIdx.x * 384 + 169] = 0;
    	temp_histo[threadIdx.x * 384 + 170] = 0;
    	temp_histo[threadIdx.x * 384 + 171] = 0;
    	temp_histo[threadIdx.x * 384 + 172] = 0;
    	temp_histo[threadIdx.x * 384 + 173] = 0;
    	temp_histo[threadIdx.x * 384 + 174] = 0;
    	temp_histo[threadIdx.x * 384 + 175] = 0;
    	temp_histo[threadIdx.x * 384 + 176] = 0;
    	temp_histo[threadIdx.x * 384 + 177] = 0;
    	temp_histo[threadIdx.x * 384 + 178] = 0;
    	temp_histo[threadIdx.x * 384 + 179] = 0;
    	temp_histo[threadIdx.x * 384 + 180] = 0;
    	temp_histo[threadIdx.x * 384 + 181] = 0;
    	temp_histo[threadIdx.x * 384 + 182] = 0;
    	temp_histo[threadIdx.x * 384 + 183] = 0;
    	temp_histo[threadIdx.x * 384 + 184] = 0;
    	temp_histo[threadIdx.x * 384 + 185] = 0;
    	temp_histo[threadIdx.x * 384 + 186] = 0;
    	temp_histo[threadIdx.x * 384 + 187] = 0;
    	temp_histo[threadIdx.x * 384 + 188] = 0;
    	temp_histo[threadIdx.x * 384 + 189] = 0;
    	temp_histo[threadIdx.x * 384 + 190] = 0;
    	temp_histo[threadIdx.x * 384 + 191] = 0;
    	temp_histo[threadIdx.x * 384 + 192] = 0;
    	temp_histo[threadIdx.x * 384 + 193] = 0;
    	temp_histo[threadIdx.x * 384 + 195] = 0;
    	temp_histo[threadIdx.x * 384 + 196] = 0;
    	temp_histo[threadIdx.x * 384 + 197] = 0;
    	temp_histo[threadIdx.x * 384 + 198] = 0;
    	temp_histo[threadIdx.x * 384 + 199] = 0;
    	temp_histo[threadIdx.x * 384 + 200] = 0;
    	temp_histo[threadIdx.x * 384 + 201] = 0;
    	temp_histo[threadIdx.x * 384 + 202] = 0;
    	temp_histo[threadIdx.x * 384 + 203] = 0;
    	temp_histo[threadIdx.x * 384 + 204] = 0;
    	temp_histo[threadIdx.x * 384 + 205] = 0;
    	temp_histo[threadIdx.x * 384 + 206] = 0;
    	temp_histo[threadIdx.x * 384 + 207] = 0;
    	temp_histo[threadIdx.x * 384 + 208] = 0;
    	temp_histo[threadIdx.x * 384 + 209] = 0;
    	temp_histo[threadIdx.x * 384 + 210] = 0;
    	temp_histo[threadIdx.x * 384 + 211] = 0;
    	temp_histo[threadIdx.x * 384 + 212] = 0;
    	temp_histo[threadIdx.x * 384 + 213] = 0;
    	temp_histo[threadIdx.x * 384 + 214] = 0;
    	temp_histo[threadIdx.x * 384 + 215] = 0;
    	temp_histo[threadIdx.x * 384 + 216] = 0;
    	temp_histo[threadIdx.x * 384 + 217] = 0;
    	temp_histo[threadIdx.x * 384 + 218] = 0;
    	temp_histo[threadIdx.x * 384 + 219] = 0;
    	temp_histo[threadIdx.x * 384 + 220] = 0;
    	temp_histo[threadIdx.x * 384 + 221] = 0;
    	temp_histo[threadIdx.x * 384 + 222] = 0;
    	temp_histo[threadIdx.x * 384 + 223] = 0;
    	temp_histo[threadIdx.x * 384 + 224] = 0;
    	temp_histo[threadIdx.x * 384 + 225] = 0;
    	temp_histo[threadIdx.x * 384 + 226] = 0;
    	temp_histo[threadIdx.x * 384 + 227] = 0;
    	temp_histo[threadIdx.x * 384 + 228] = 0;
    	temp_histo[threadIdx.x * 384 + 229] = 0;
    	temp_histo[threadIdx.x * 384 + 230] = 0;
    	temp_histo[threadIdx.x * 384 + 231] = 0;
    	temp_histo[threadIdx.x * 384 + 232] = 0;
    	temp_histo[threadIdx.x * 384 + 233] = 0;
    	temp_histo[threadIdx.x * 384 + 234] = 0;
    	temp_histo[threadIdx.x * 384 + 235] = 0;
    	temp_histo[threadIdx.x * 384 + 236] = 0;
    	temp_histo[threadIdx.x * 384 + 237] = 0;
    	temp_histo[threadIdx.x * 384 + 238] = 0;
    	temp_histo[threadIdx.x * 384 + 239] = 0;
    	temp_histo[threadIdx.x * 384 + 240] = 0;
    	temp_histo[threadIdx.x * 384 + 241] = 0;
    	temp_histo[threadIdx.x * 384 + 242] = 0;
    	temp_histo[threadIdx.x * 384 + 243] = 0;
    	temp_histo[threadIdx.x * 384 + 244] = 0;
    	temp_histo[threadIdx.x * 384 + 245] = 0;
    	temp_histo[threadIdx.x * 384 + 246] = 0;
    	temp_histo[threadIdx.x * 384 + 247] = 0;
    	temp_histo[threadIdx.x * 384 + 248] = 0;
    	temp_histo[threadIdx.x * 384 + 249] = 0;
    	temp_histo[threadIdx.x * 384 + 250] = 0;
    	temp_histo[threadIdx.x * 384 + 251] = 0;
    	temp_histo[threadIdx.x * 384 + 252] = 0;
    	temp_histo[threadIdx.x * 384 + 253] = 0;
    	temp_histo[threadIdx.x * 384 + 254] = 0;
    	temp_histo[threadIdx.x * 384 + 255] = 0;
    	temp_histo[threadIdx.x * 384 + 256] = 0;
    	temp_histo[threadIdx.x * 384 + 257] = 0;
    	temp_histo[threadIdx.x * 384 + 258] = 0;
    	temp_histo[threadIdx.x * 384 + 259] = 0;
    	temp_histo[threadIdx.x * 384 + 260] = 0;
    	temp_histo[threadIdx.x * 384 + 261] = 0;
    	temp_histo[threadIdx.x * 384 + 262] = 0;
    	temp_histo[threadIdx.x * 384 + 263] = 0;
    	temp_histo[threadIdx.x * 384 + 264] = 0;
    	temp_histo[threadIdx.x * 384 + 265] = 0;
    	temp_histo[threadIdx.x * 384 + 266] = 0;
    	temp_histo[threadIdx.x * 384 + 267] = 0;
    	temp_histo[threadIdx.x * 384 + 268] = 0;
    	temp_histo[threadIdx.x * 384 + 269] = 0;
    	temp_histo[threadIdx.x * 384 + 270] = 0;
    	temp_histo[threadIdx.x * 384 + 271] = 0;
    	temp_histo[threadIdx.x * 384 + 272] = 0;
    	temp_histo[threadIdx.x * 384 + 273] = 0;
    	temp_histo[threadIdx.x * 384 + 274] = 0;
    	temp_histo[threadIdx.x * 384 + 275] = 0;
    	temp_histo[threadIdx.x * 384 + 276] = 0;
    	temp_histo[threadIdx.x * 384 + 277] = 0;
    	temp_histo[threadIdx.x * 384 + 278] = 0;
    	temp_histo[threadIdx.x * 384 + 279] = 0;
    	temp_histo[threadIdx.x * 384 + 280] = 0;
    	temp_histo[threadIdx.x * 384 + 281] = 0;
    	temp_histo[threadIdx.x * 384 + 282] = 0;
    	temp_histo[threadIdx.x * 384 + 283] = 0;
    	temp_histo[threadIdx.x * 384 + 284] = 0;
    	temp_histo[threadIdx.x * 384 + 285] = 0;
    	temp_histo[threadIdx.x * 384 + 286] = 0;
    	temp_histo[threadIdx.x * 384 + 287] = 0;
    	temp_histo[threadIdx.x * 384 + 288] = 0;
    	temp_histo[threadIdx.x * 384 + 289] = 0;
    	temp_histo[threadIdx.x * 384 + 290] = 0;
    	temp_histo[threadIdx.x * 384 + 291] = 0;
    	temp_histo[threadIdx.x * 384 + 292] = 0;
    	temp_histo[threadIdx.x * 384 + 293] = 0;
    	temp_histo[threadIdx.x * 384 + 295] = 0;
    	temp_histo[threadIdx.x * 384 + 296] = 0;
    	temp_histo[threadIdx.x * 384 + 297] = 0;
    	temp_histo[threadIdx.x * 384 + 298] = 0;
    	temp_histo[threadIdx.x * 384 + 299] = 0;
    	temp_histo[threadIdx.x * 384 + 300] = 0;
    	temp_histo[threadIdx.x * 384 + 301] = 0;
    	temp_histo[threadIdx.x * 384 + 302] = 0;
    	temp_histo[threadIdx.x * 384 + 303] = 0;
    	temp_histo[threadIdx.x * 384 + 304] = 0;
    	temp_histo[threadIdx.x * 384 + 305] = 0;
    	temp_histo[threadIdx.x * 384 + 306] = 0;
    	temp_histo[threadIdx.x * 384 + 307] = 0;
    	temp_histo[threadIdx.x * 384 + 308] = 0;
    	temp_histo[threadIdx.x * 384 + 309] = 0;
    	temp_histo[threadIdx.x * 384 + 310] = 0;
    	temp_histo[threadIdx.x * 384 + 311] = 0;
    	temp_histo[threadIdx.x * 384 + 312] = 0;
    	temp_histo[threadIdx.x * 384 + 313] = 0;
    	temp_histo[threadIdx.x * 384 + 314] = 0;
    	temp_histo[threadIdx.x * 384 + 315] = 0;
    	temp_histo[threadIdx.x * 384 + 316] = 0;
    	temp_histo[threadIdx.x * 384 + 317] = 0;
    	temp_histo[threadIdx.x * 384 + 318] = 0;
    	temp_histo[threadIdx.x * 384 + 319] = 0;
    	temp_histo[threadIdx.x * 384 + 320] = 0;
    	temp_histo[threadIdx.x * 384 + 321] = 0;
    	temp_histo[threadIdx.x * 384 + 322] = 0;
    	temp_histo[threadIdx.x * 384 + 323] = 0;
    	temp_histo[threadIdx.x * 384 + 324] = 0;
    	temp_histo[threadIdx.x * 384 + 325] = 0;
    	temp_histo[threadIdx.x * 384 + 326] = 0;
    	temp_histo[threadIdx.x * 384 + 327] = 0;
    	temp_histo[threadIdx.x * 384 + 328] = 0;
    	temp_histo[threadIdx.x * 384 + 329] = 0;
    	temp_histo[threadIdx.x * 384 + 330] = 0;
    	temp_histo[threadIdx.x * 384 + 331] = 0;
    	temp_histo[threadIdx.x * 384 + 332] = 0;
    	temp_histo[threadIdx.x * 384 + 333] = 0;
    	temp_histo[threadIdx.x * 384 + 334] = 0;
    	temp_histo[threadIdx.x * 384 + 335] = 0;
    	temp_histo[threadIdx.x * 384 + 336] = 0;
    	temp_histo[threadIdx.x * 384 + 337] = 0;
    	temp_histo[threadIdx.x * 384 + 338] = 0;
    	temp_histo[threadIdx.x * 384 + 339] = 0;
    	temp_histo[threadIdx.x * 384 + 340] = 0;
    	temp_histo[threadIdx.x * 384 + 341] = 0;
    	temp_histo[threadIdx.x * 384 + 342] = 0;
    	temp_histo[threadIdx.x * 384 + 343] = 0;
    	temp_histo[threadIdx.x * 384 + 344] = 0;
    	temp_histo[threadIdx.x * 384 + 345] = 0;
    	temp_histo[threadIdx.x * 384 + 346] = 0;
    	temp_histo[threadIdx.x * 384 + 347] = 0;
    	temp_histo[threadIdx.x * 384 + 348] = 0;
    	temp_histo[threadIdx.x * 384 + 349] = 0;
    	temp_histo[threadIdx.x * 384 + 350] = 0;
    	temp_histo[threadIdx.x * 384 + 351] = 0;
    	temp_histo[threadIdx.x * 384 + 352] = 0;
    	temp_histo[threadIdx.x * 384 + 353] = 0;
    	temp_histo[threadIdx.x * 384 + 354] = 0;
    	temp_histo[threadIdx.x * 384 + 355] = 0;
    	temp_histo[threadIdx.x * 384 + 356] = 0;
    	temp_histo[threadIdx.x * 384 + 357] = 0;
    	temp_histo[threadIdx.x * 384 + 358] = 0;
    	temp_histo[threadIdx.x * 384 + 359] = 0;
    	temp_histo[threadIdx.x * 384 + 360] = 0;
    	temp_histo[threadIdx.x * 384 + 361] = 0;
    	temp_histo[threadIdx.x * 384 + 362] = 0;
    	temp_histo[threadIdx.x * 384 + 363] = 0;
    	temp_histo[threadIdx.x * 384 + 364] = 0;
    	temp_histo[threadIdx.x * 384 + 365] = 0;
    	temp_histo[threadIdx.x * 384 + 366] = 0;
    	temp_histo[threadIdx.x * 384 + 367] = 0;
    	temp_histo[threadIdx.x * 384 + 368] = 0;
    	temp_histo[threadIdx.x * 384 + 369] = 0;
    	temp_histo[threadIdx.x * 384 + 370] = 0;
    	temp_histo[threadIdx.x * 384 + 371] = 0;
    	temp_histo[threadIdx.x * 384 + 372] = 0;
    	temp_histo[threadIdx.x * 384 + 373] = 0;
    	temp_histo[threadIdx.x * 384 + 374] = 0;
    	temp_histo[threadIdx.x * 384 + 375] = 0;
    	temp_histo[threadIdx.x * 384 + 376] = 0;
    	temp_histo[threadIdx.x * 384 + 377] = 0;
    	temp_histo[threadIdx.x * 384 + 378] = 0;
    	temp_histo[threadIdx.x * 384 + 379] = 0;
    	temp_histo[threadIdx.x * 384 + 380] = 0;
    	temp_histo[threadIdx.x * 384 + 381] = 0;
    	temp_histo[threadIdx.x * 384 + 382] = 0;
    	temp_histo[threadIdx.x * 384 + 383] = 0;
    	__syncthreads();

    	int i = threadIdx.x + blockIdx.x * blockDim.x;
    	int offset = blockDim.x * gridDim.x;
    	while(i < reqNumThreads){
    	//	int j = 0;
    	//	while((j < numPixPerThread) && (((i * numElemPerThread)+(j * 3)) < imgDataBufferSize)){
    			//printf("Inside while\n");
    			float L = dev_imgDataBuffer[(i * numElemPerThread)];
    			float a = dev_imgDataBuffer[(i * numElemPerThread + 1)];
    			float b = dev_imgDataBuffer[(i * numElemPerThread + 2)];
    			int idx = ((((int)round(L)-0)/binSize)*nbBinsPerDim*nbBinsPerDim)+
    					(((int)round(a)+127)/binSize)*nbBinsPerDim +
    					((int)round(b)+127)/binSize;

    			/**checking if the idx lies between the current range of histogram**/
    			if(idx >= stride && idx < stride_offset){
    				int finalIdx = idx - stride;
    				atomicAdd(&temp_histo[finalIdx],1);
    			}//end of if condition
    		//	j++;
    		//}//end of while loop calculating number of n values per thread
    		i += offset;
    	}//end of image scan while condition
    	__syncthreads();

    		atomicAdd(&dev_histo[(threadIdx.x * 384) + stride], temp_histo[threadIdx.x * 384 + 0]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 1) + stride], temp_histo[threadIdx.x * 384 + 1]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 2) + stride], temp_histo[threadIdx.x * 384 + 2]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 3) + stride], temp_histo[threadIdx.x * 384 + 3]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 4) + stride], temp_histo[threadIdx.x * 384 + 4]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 5) + stride], temp_histo[threadIdx.x * 384 + 5]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 6) + stride], temp_histo[threadIdx.x * 384 + 6]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 7) + stride], temp_histo[threadIdx.x * 384 + 7]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 8) + stride], temp_histo[threadIdx.x * 384 + 8]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 9) + stride], temp_histo[threadIdx.x * 384 + 9]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 10) + stride], temp_histo[threadIdx.x * 384 + 10]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 11) + stride], temp_histo[threadIdx.x * 384 + 11]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 12) + stride], temp_histo[threadIdx.x * 384 + 12]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 13) + stride], temp_histo[threadIdx.x * 384 + 13]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 14) + stride], temp_histo[threadIdx.x * 384 + 14]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 15) + stride], temp_histo[threadIdx.x * 384 + 15]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 16) + stride], temp_histo[threadIdx.x * 384 + 16]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 17) + stride], temp_histo[threadIdx.x * 384 + 17]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 18) + stride], temp_histo[threadIdx.x * 384 + 18]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 19) + stride], temp_histo[threadIdx.x * 384 + 19]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 20) + stride], temp_histo[threadIdx.x * 384 + 20]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 21) + stride], temp_histo[threadIdx.x * 384 + 21]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 22) + stride], temp_histo[threadIdx.x * 384 + 22]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 23) + stride], temp_histo[threadIdx.x * 384 + 23]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 24) + stride], temp_histo[threadIdx.x * 384 + 24]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 25) + stride], temp_histo[threadIdx.x * 384 + 25]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 26) + stride], temp_histo[threadIdx.x * 384 + 26]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 27) + stride], temp_histo[threadIdx.x * 384 + 27]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 28) + stride], temp_histo[threadIdx.x * 384 + 28]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 29) + stride], temp_histo[threadIdx.x * 384 + 29]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 30) + stride], temp_histo[threadIdx.x * 384 + 30]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 31) + stride], temp_histo[threadIdx.x * 384 + 31]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 32) + stride], temp_histo[threadIdx.x * 384 + 32]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 33) + stride], temp_histo[threadIdx.x * 384 + 33]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 34) + stride], temp_histo[threadIdx.x * 384 + 34]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 35) + stride], temp_histo[threadIdx.x * 384 + 35]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 36) + stride], temp_histo[threadIdx.x * 384 + 36]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 37) + stride], temp_histo[threadIdx.x * 384 + 37]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 38) + stride], temp_histo[threadIdx.x * 384 + 38]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 39) + stride], temp_histo[threadIdx.x * 384 + 39]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 40) + stride], temp_histo[threadIdx.x * 384 + 40]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 41) + stride], temp_histo[threadIdx.x * 384 + 41]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 42) + stride], temp_histo[threadIdx.x * 384 + 42]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 43) + stride], temp_histo[threadIdx.x * 384 + 43]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 44) + stride], temp_histo[threadIdx.x * 384 + 44]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 45) + stride], temp_histo[threadIdx.x * 384 + 45]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 46) + stride], temp_histo[threadIdx.x * 384 + 46]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 47) + stride], temp_histo[threadIdx.x * 384 + 47]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 48) + stride], temp_histo[threadIdx.x * 384 + 48]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 49) + stride], temp_histo[threadIdx.x * 384 + 49]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 50) + stride], temp_histo[threadIdx.x * 384 + 50]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 51) + stride], temp_histo[threadIdx.x * 384 + 51]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 52) + stride], temp_histo[threadIdx.x * 384 + 52]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 53) + stride], temp_histo[threadIdx.x * 384 + 53]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 54) + stride], temp_histo[threadIdx.x * 384 + 54]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 55) + stride], temp_histo[threadIdx.x * 384 + 55]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 56) + stride], temp_histo[threadIdx.x * 384 + 56]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 57) + stride], temp_histo[threadIdx.x * 384 + 57]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 58) + stride], temp_histo[threadIdx.x * 384 + 58]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 59) + stride], temp_histo[threadIdx.x * 384 + 59]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 60) + stride], temp_histo[threadIdx.x * 384 + 60]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 61) + stride], temp_histo[threadIdx.x * 384 + 61]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 62) + stride], temp_histo[threadIdx.x * 384 + 62]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 63) + stride], temp_histo[threadIdx.x * 384 + 63]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 64) + stride], temp_histo[threadIdx.x * 384 + 64]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 65) + stride], temp_histo[threadIdx.x * 384 + 65]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 66) + stride], temp_histo[threadIdx.x * 384 + 66]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 67) + stride], temp_histo[threadIdx.x * 384 + 67]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 68) + stride], temp_histo[threadIdx.x * 384 + 68]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 69) + stride], temp_histo[threadIdx.x * 384 + 69]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 70) + stride], temp_histo[threadIdx.x * 384 + 70]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 71) + stride], temp_histo[threadIdx.x * 384 + 71]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 72) + stride], temp_histo[threadIdx.x * 384 + 72]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 73) + stride], temp_histo[threadIdx.x * 384 + 73]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 74) + stride], temp_histo[threadIdx.x * 384 + 74]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 75) + stride], temp_histo[threadIdx.x * 384 + 75]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 76) + stride], temp_histo[threadIdx.x * 384 + 76]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 77) + stride], temp_histo[threadIdx.x * 384 + 77]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 78) + stride], temp_histo[threadIdx.x * 384 + 78]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 79) + stride], temp_histo[threadIdx.x * 384 + 79]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 80) + stride], temp_histo[threadIdx.x * 384 + 80]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 81) + stride], temp_histo[threadIdx.x * 384 + 81]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 82) + stride], temp_histo[threadIdx.x * 384 + 82]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 83) + stride], temp_histo[threadIdx.x * 384 + 83]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 84) + stride], temp_histo[threadIdx.x * 384 + 84]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 85) + stride], temp_histo[threadIdx.x * 384 + 85]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 86) + stride], temp_histo[threadIdx.x * 384 + 86]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 87) + stride], temp_histo[threadIdx.x * 384 + 87]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 88) + stride], temp_histo[threadIdx.x * 384 + 88]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 89) + stride], temp_histo[threadIdx.x * 384 + 89]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 90) + stride], temp_histo[threadIdx.x * 384 + 90]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 91) + stride], temp_histo[threadIdx.x * 384 + 91]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 92) + stride], temp_histo[threadIdx.x * 384 + 92]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 93) + stride], temp_histo[threadIdx.x * 384 + 93]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 94) + stride], temp_histo[threadIdx.x * 384 + 94]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 95) + stride], temp_histo[threadIdx.x * 384 + 95]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 96) + stride], temp_histo[threadIdx.x * 384 + 96]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 97) + stride], temp_histo[threadIdx.x * 384 + 97]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 98) + stride], temp_histo[threadIdx.x * 384 + 98]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 99) + stride], temp_histo[threadIdx.x * 384 + 99]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 100) + stride], temp_histo[threadIdx.x * 384 + 100]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 101) + stride], temp_histo[threadIdx.x * 384 + 101]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 102) + stride], temp_histo[threadIdx.x * 384 + 102]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 103) + stride], temp_histo[threadIdx.x * 384 + 103]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 104) + stride], temp_histo[threadIdx.x * 384 + 104]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 105) + stride], temp_histo[threadIdx.x * 384 + 105]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 106) + stride], temp_histo[threadIdx.x * 384 + 106]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 107) + stride], temp_histo[threadIdx.x * 384 + 107]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 108) + stride], temp_histo[threadIdx.x * 384 + 108]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 109) + stride], temp_histo[threadIdx.x * 384 + 109]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 110) + stride], temp_histo[threadIdx.x * 384 + 110]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 111) + stride], temp_histo[threadIdx.x * 384 + 111]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 112) + stride], temp_histo[threadIdx.x * 384 + 112]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 113) + stride], temp_histo[threadIdx.x * 384 + 113]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 114) + stride], temp_histo[threadIdx.x * 384 + 114]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 115) + stride], temp_histo[threadIdx.x * 384 + 115]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 116) + stride], temp_histo[threadIdx.x * 384 + 116]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 117) + stride], temp_histo[threadIdx.x * 384 + 117]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 118) + stride], temp_histo[threadIdx.x * 384 + 118]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 119) + stride], temp_histo[threadIdx.x * 384 + 119]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 120) + stride], temp_histo[threadIdx.x * 384 + 120]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 121) + stride], temp_histo[threadIdx.x * 384 + 121]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 122) + stride], temp_histo[threadIdx.x * 384 + 122]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 123) + stride], temp_histo[threadIdx.x * 384 + 123]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 124) + stride], temp_histo[threadIdx.x * 384 + 124]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 125) + stride], temp_histo[threadIdx.x * 384 + 125]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 126) + stride], temp_histo[threadIdx.x * 384 + 126]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 127) + stride], temp_histo[threadIdx.x * 384 + 127]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 128) + stride], temp_histo[threadIdx.x * 384 + 128]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 129) + stride], temp_histo[threadIdx.x * 384 + 129]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 130) + stride], temp_histo[threadIdx.x * 384 + 130]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 131) + stride], temp_histo[threadIdx.x * 384 + 131]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 132) + stride], temp_histo[threadIdx.x * 384 + 132]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 133) + stride], temp_histo[threadIdx.x * 384 + 133]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 134) + stride], temp_histo[threadIdx.x * 384 + 134]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 135) + stride], temp_histo[threadIdx.x * 384 + 135]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 136) + stride], temp_histo[threadIdx.x * 384 + 136]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 137) + stride], temp_histo[threadIdx.x * 384 + 137]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 138) + stride], temp_histo[threadIdx.x * 384 + 138]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 139) + stride], temp_histo[threadIdx.x * 384 + 139]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 140) + stride], temp_histo[threadIdx.x * 384 + 140]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 141) + stride], temp_histo[threadIdx.x * 384 + 141]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 142) + stride], temp_histo[threadIdx.x * 384 + 142]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 143) + stride], temp_histo[threadIdx.x * 384 + 143]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 144) + stride], temp_histo[threadIdx.x * 384 + 144]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 145) + stride], temp_histo[threadIdx.x * 384 + 145]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 146) + stride], temp_histo[threadIdx.x * 384 + 146]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 147) + stride], temp_histo[threadIdx.x * 384 + 147]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 148) + stride], temp_histo[threadIdx.x * 384 + 148]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 149) + stride], temp_histo[threadIdx.x * 384 + 149]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 150) + stride], temp_histo[threadIdx.x * 384 + 150]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 151) + stride], temp_histo[threadIdx.x * 384 + 151]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 152) + stride], temp_histo[threadIdx.x * 384 + 152]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 153) + stride], temp_histo[threadIdx.x * 384 + 153]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 154) + stride], temp_histo[threadIdx.x * 384 + 154]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 155) + stride], temp_histo[threadIdx.x * 384 + 155]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 156) + stride], temp_histo[threadIdx.x * 384 + 156]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 157) + stride], temp_histo[threadIdx.x * 384 + 157]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 158) + stride], temp_histo[threadIdx.x * 384 + 158]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 159) + stride], temp_histo[threadIdx.x * 384 + 159]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 160) + stride], temp_histo[threadIdx.x * 384 + 160]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 161) + stride], temp_histo[threadIdx.x * 384 + 161]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 162) + stride], temp_histo[threadIdx.x * 384 + 162]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 163) + stride], temp_histo[threadIdx.x * 384 + 163]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 164) + stride], temp_histo[threadIdx.x * 384 + 164]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 165) + stride], temp_histo[threadIdx.x * 384 + 165]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 166) + stride], temp_histo[threadIdx.x * 384 + 166]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 167) + stride], temp_histo[threadIdx.x * 384 + 167]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 168) + stride], temp_histo[threadIdx.x * 384 + 168]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 169) + stride], temp_histo[threadIdx.x * 384 + 169]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 170) + stride], temp_histo[threadIdx.x * 384 + 170]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 171) + stride], temp_histo[threadIdx.x * 384 + 171]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 172) + stride], temp_histo[threadIdx.x * 384 + 172]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 173) + stride], temp_histo[threadIdx.x * 384 + 173]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 174) + stride], temp_histo[threadIdx.x * 384 + 174]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 175) + stride], temp_histo[threadIdx.x * 384 + 175]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 176) + stride], temp_histo[threadIdx.x * 384 + 176]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 177) + stride], temp_histo[threadIdx.x * 384 + 177]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 178) + stride], temp_histo[threadIdx.x * 384 + 178]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 179) + stride], temp_histo[threadIdx.x * 384 + 179]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 180) + stride], temp_histo[threadIdx.x * 384 + 180]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 181) + stride], temp_histo[threadIdx.x * 384 + 181]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 182) + stride], temp_histo[threadIdx.x * 384 + 182]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 183) + stride], temp_histo[threadIdx.x * 384 + 183]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 184) + stride], temp_histo[threadIdx.x * 384 + 184]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 185) + stride], temp_histo[threadIdx.x * 384 + 185]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 186) + stride], temp_histo[threadIdx.x * 384 + 186]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 187) + stride], temp_histo[threadIdx.x * 384 + 187]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 188) + stride], temp_histo[threadIdx.x * 384 + 188]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 189) + stride], temp_histo[threadIdx.x * 384 + 189]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 190) + stride], temp_histo[threadIdx.x * 384 + 190]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 191) + stride], temp_histo[threadIdx.x * 384 + 191]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 192) + stride], temp_histo[threadIdx.x * 384 + 192]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 193) + stride], temp_histo[threadIdx.x * 384 + 193]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 194) + stride], temp_histo[threadIdx.x * 384 + 194]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 195) + stride], temp_histo[threadIdx.x * 384 + 195]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 196) + stride], temp_histo[threadIdx.x * 384 + 196]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 197) + stride], temp_histo[threadIdx.x * 384 + 197]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 198) + stride], temp_histo[threadIdx.x * 384 + 198]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 199) + stride], temp_histo[threadIdx.x * 384 + 199]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 200) + stride], temp_histo[threadIdx.x * 384 + 200]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 201) + stride], temp_histo[threadIdx.x * 384 + 201]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 202) + stride], temp_histo[threadIdx.x * 384 + 202]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 203) + stride], temp_histo[threadIdx.x * 384 + 203]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 204) + stride], temp_histo[threadIdx.x * 384 + 204]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 205) + stride], temp_histo[threadIdx.x * 384 + 205]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 206) + stride], temp_histo[threadIdx.x * 384 + 206]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 207) + stride], temp_histo[threadIdx.x * 384 + 207]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 208) + stride], temp_histo[threadIdx.x * 384 + 208]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 209) + stride], temp_histo[threadIdx.x * 384 + 209]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 210) + stride], temp_histo[threadIdx.x * 384 + 210]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 211) + stride], temp_histo[threadIdx.x * 384 + 211]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 212) + stride], temp_histo[threadIdx.x * 384 + 212]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 213) + stride], temp_histo[threadIdx.x * 384 + 213]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 214) + stride], temp_histo[threadIdx.x * 384 + 214]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 215) + stride], temp_histo[threadIdx.x * 384 + 215]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 216) + stride], temp_histo[threadIdx.x * 384 + 216]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 217) + stride], temp_histo[threadIdx.x * 384 + 217]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 218) + stride], temp_histo[threadIdx.x * 384 + 218]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 219) + stride], temp_histo[threadIdx.x * 384 + 219]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 220) + stride], temp_histo[threadIdx.x * 384 + 220]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 221) + stride], temp_histo[threadIdx.x * 384 + 221]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 222) + stride], temp_histo[threadIdx.x * 384 + 222]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 223) + stride], temp_histo[threadIdx.x * 384 + 223]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 224) + stride], temp_histo[threadIdx.x * 384 + 224]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 225) + stride], temp_histo[threadIdx.x * 384 + 225]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 226) + stride], temp_histo[threadIdx.x * 384 + 226]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 227) + stride], temp_histo[threadIdx.x * 384 + 227]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 228) + stride], temp_histo[threadIdx.x * 384 + 228]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 229) + stride], temp_histo[threadIdx.x * 384 + 229]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 230) + stride], temp_histo[threadIdx.x * 384 + 230]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 231) + stride], temp_histo[threadIdx.x * 384 + 231]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 232) + stride], temp_histo[threadIdx.x * 384 + 232]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 233) + stride], temp_histo[threadIdx.x * 384 + 233]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 234) + stride], temp_histo[threadIdx.x * 384 + 234]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 235) + stride], temp_histo[threadIdx.x * 384 + 235]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 236) + stride], temp_histo[threadIdx.x * 384 + 236]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 237) + stride], temp_histo[threadIdx.x * 384 + 237]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 238) + stride], temp_histo[threadIdx.x * 384 + 238]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 239) + stride], temp_histo[threadIdx.x * 384 + 239]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 240) + stride], temp_histo[threadIdx.x * 384 + 240]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 241) + stride], temp_histo[threadIdx.x * 384 + 241]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 242) + stride], temp_histo[threadIdx.x * 384 + 242]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 243) + stride], temp_histo[threadIdx.x * 384 + 243]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 244) + stride], temp_histo[threadIdx.x * 384 + 244]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 245) + stride], temp_histo[threadIdx.x * 384 + 245]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 246) + stride], temp_histo[threadIdx.x * 384 + 246]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 247) + stride], temp_histo[threadIdx.x * 384 + 247]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 248) + stride], temp_histo[threadIdx.x * 384 + 248]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 249) + stride], temp_histo[threadIdx.x * 384 + 249]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 250) + stride], temp_histo[threadIdx.x * 384 + 250]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 251) + stride], temp_histo[threadIdx.x * 384 + 251]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 252) + stride], temp_histo[threadIdx.x * 384 + 252]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 253) + stride], temp_histo[threadIdx.x * 384 + 253]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 254) + stride], temp_histo[threadIdx.x * 384 + 254]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 255) + stride], temp_histo[threadIdx.x * 384 + 255]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 256) + stride], temp_histo[threadIdx.x * 384 + 256]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 257) + stride], temp_histo[threadIdx.x * 384 + 257]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 258) + stride], temp_histo[threadIdx.x * 384 + 258]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 259) + stride], temp_histo[threadIdx.x * 384 + 259]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 260) + stride], temp_histo[threadIdx.x * 384 + 260]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 261) + stride], temp_histo[threadIdx.x * 384 + 261]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 262) + stride], temp_histo[threadIdx.x * 384 + 262]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 263) + stride], temp_histo[threadIdx.x * 384 + 263]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 264) + stride], temp_histo[threadIdx.x * 384 + 264]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 265) + stride], temp_histo[threadIdx.x * 384 + 265]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 266) + stride], temp_histo[threadIdx.x * 384 + 266]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 267) + stride], temp_histo[threadIdx.x * 384 + 267]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 268) + stride], temp_histo[threadIdx.x * 384 + 268]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 269) + stride], temp_histo[threadIdx.x * 384 + 269]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 270) + stride], temp_histo[threadIdx.x * 384 + 270]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 271) + stride], temp_histo[threadIdx.x * 384 + 271]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 272) + stride], temp_histo[threadIdx.x * 384 + 272]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 273) + stride], temp_histo[threadIdx.x * 384 + 273]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 274) + stride], temp_histo[threadIdx.x * 384 + 274]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 275) + stride], temp_histo[threadIdx.x * 384 + 275]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 276) + stride], temp_histo[threadIdx.x * 384 + 276]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 277) + stride], temp_histo[threadIdx.x * 384 + 277]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 278) + stride], temp_histo[threadIdx.x * 384 + 278]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 279) + stride], temp_histo[threadIdx.x * 384 + 279]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 280) + stride], temp_histo[threadIdx.x * 384 + 280]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 281) + stride], temp_histo[threadIdx.x * 384 + 281]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 282) + stride], temp_histo[threadIdx.x * 384 + 282]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 283) + stride], temp_histo[threadIdx.x * 384 + 283]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 284) + stride], temp_histo[threadIdx.x * 384 + 284]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 285) + stride], temp_histo[threadIdx.x * 384 + 285]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 286) + stride], temp_histo[threadIdx.x * 384 + 286]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 287) + stride], temp_histo[threadIdx.x * 384 + 287]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 288) + stride], temp_histo[threadIdx.x * 384 + 288]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 289) + stride], temp_histo[threadIdx.x * 384 + 289]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 290) + stride], temp_histo[threadIdx.x * 384 + 290]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 291) + stride], temp_histo[threadIdx.x * 384 + 291]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 292) + stride], temp_histo[threadIdx.x * 384 + 292]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 293) + stride], temp_histo[threadIdx.x * 384 + 293]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 294) + stride], temp_histo[threadIdx.x * 384 + 294]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 295) + stride], temp_histo[threadIdx.x * 384 + 295]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 296) + stride], temp_histo[threadIdx.x * 384 + 296]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 297) + stride], temp_histo[threadIdx.x * 384 + 297]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 298) + stride], temp_histo[threadIdx.x * 384 + 298]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 299) + stride], temp_histo[threadIdx.x * 384 + 299]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 300) + stride], temp_histo[threadIdx.x * 384 + 300]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 301) + stride], temp_histo[threadIdx.x * 384 + 301]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 302) + stride], temp_histo[threadIdx.x * 384 + 302]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 303) + stride], temp_histo[threadIdx.x * 384 + 303]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 304) + stride], temp_histo[threadIdx.x * 384 + 304]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 305) + stride], temp_histo[threadIdx.x * 384 + 305]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 306) + stride], temp_histo[threadIdx.x * 384 + 306]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 307) + stride], temp_histo[threadIdx.x * 384 + 307]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 308) + stride], temp_histo[threadIdx.x * 384 + 308]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 309) + stride], temp_histo[threadIdx.x * 384 + 309]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 310) + stride], temp_histo[threadIdx.x * 384 + 310]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 311) + stride], temp_histo[threadIdx.x * 384 + 311]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 312) + stride], temp_histo[threadIdx.x * 384 + 312]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 313) + stride], temp_histo[threadIdx.x * 384 + 313]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 314) + stride], temp_histo[threadIdx.x * 384 + 314]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 315) + stride], temp_histo[threadIdx.x * 384 + 315]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 316) + stride], temp_histo[threadIdx.x * 384 + 316]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 317) + stride], temp_histo[threadIdx.x * 384 + 317]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 318) + stride], temp_histo[threadIdx.x * 384 + 318]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 319) + stride], temp_histo[threadIdx.x * 384 + 319]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 320) + stride], temp_histo[threadIdx.x * 384 + 320]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 321) + stride], temp_histo[threadIdx.x * 384 + 321]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 322) + stride], temp_histo[threadIdx.x * 384 + 322]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 323) + stride], temp_histo[threadIdx.x * 384 + 323]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 324) + stride], temp_histo[threadIdx.x * 384 + 324]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 325) + stride], temp_histo[threadIdx.x * 384 + 325]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 326) + stride], temp_histo[threadIdx.x * 384 + 326]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 327) + stride], temp_histo[threadIdx.x * 384 + 327]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 328) + stride], temp_histo[threadIdx.x * 384 + 328]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 329) + stride], temp_histo[threadIdx.x * 384 + 329]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 330) + stride], temp_histo[threadIdx.x * 384 + 330]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 331) + stride], temp_histo[threadIdx.x * 384 + 331]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 332) + stride], temp_histo[threadIdx.x * 384 + 332]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 333) + stride], temp_histo[threadIdx.x * 384 + 333]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 334) + stride], temp_histo[threadIdx.x * 384 + 334]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 335) + stride], temp_histo[threadIdx.x * 384 + 335]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 336) + stride], temp_histo[threadIdx.x * 384 + 336]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 337) + stride], temp_histo[threadIdx.x * 384 + 337]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 338) + stride], temp_histo[threadIdx.x * 384 + 338]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 339) + stride], temp_histo[threadIdx.x * 384 + 339]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 340) + stride], temp_histo[threadIdx.x * 384 + 340]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 341) + stride], temp_histo[threadIdx.x * 384 + 341]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 342) + stride], temp_histo[threadIdx.x * 384 + 342]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 343) + stride], temp_histo[threadIdx.x * 384 + 343]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 344) + stride], temp_histo[threadIdx.x * 384 + 344]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 345) + stride], temp_histo[threadIdx.x * 384 + 345]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 346) + stride], temp_histo[threadIdx.x * 384 + 346]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 347) + stride], temp_histo[threadIdx.x * 384 + 347]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 348) + stride], temp_histo[threadIdx.x * 384 + 348]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 349) + stride], temp_histo[threadIdx.x * 384 + 349]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 350) + stride], temp_histo[threadIdx.x * 384 + 350]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 351) + stride], temp_histo[threadIdx.x * 384 + 351]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 352) + stride], temp_histo[threadIdx.x * 384 + 352]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 353) + stride], temp_histo[threadIdx.x * 384 + 353]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 354) + stride], temp_histo[threadIdx.x * 384 + 354]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 355) + stride], temp_histo[threadIdx.x * 384 + 355]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 356) + stride], temp_histo[threadIdx.x * 384 + 356]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 357) + stride], temp_histo[threadIdx.x * 384 + 357]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 358) + stride], temp_histo[threadIdx.x * 384 + 358]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 359) + stride], temp_histo[threadIdx.x * 384 + 359]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 360) + stride], temp_histo[threadIdx.x * 384 + 360]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 361) + stride], temp_histo[threadIdx.x * 384 + 361]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 362) + stride], temp_histo[threadIdx.x * 384 + 362]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 363) + stride], temp_histo[threadIdx.x * 384 + 363]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 364) + stride], temp_histo[threadIdx.x * 384 + 364]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 365) + stride], temp_histo[threadIdx.x * 384 + 365]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 366) + stride], temp_histo[threadIdx.x * 384 + 366]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 367) + stride], temp_histo[threadIdx.x * 384 + 367]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 368) + stride], temp_histo[threadIdx.x * 384 + 368]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 369) + stride], temp_histo[threadIdx.x * 384 + 369]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 370) + stride], temp_histo[threadIdx.x * 384 + 370]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 371) + stride], temp_histo[threadIdx.x * 384 + 371]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 372) + stride], temp_histo[threadIdx.x * 384 + 372]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 373) + stride], temp_histo[threadIdx.x * 384 + 373]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 374) + stride], temp_histo[threadIdx.x * 384 + 374]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 375) + stride], temp_histo[threadIdx.x * 384 + 375]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 376) + stride], temp_histo[threadIdx.x * 384 + 376]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 377) + stride], temp_histo[threadIdx.x * 384 + 377]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 378) + stride], temp_histo[threadIdx.x * 384 + 378]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 379) + stride], temp_histo[threadIdx.x * 384 + 379]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 380) + stride], temp_histo[threadIdx.x * 384 + 380]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 381) + stride], temp_histo[threadIdx.x * 384 + 381]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 382) + stride], temp_histo[threadIdx.x * 384 + 382]);
    		atomicAdd(&dev_histo[(threadIdx.x * 384 + 383) + stride], temp_histo[threadIdx.x * 384 + 383]);
    	stride_offset += part_histo_size;
    	stride += part_histo_size;
    	histo_count++;
	}/** end of histo_count while condition **/
}/** end of kernel function **/


void createHisto(float *imgDataBuffer, int imgDataBufferSize, int nbBinsPerDim, int imgSize, int binSize, int *count){
cudaEvent_t hostDeviceStart,hostDeviceStop;
cudaEventCreate( &hostDeviceStart );
cudaEventCreate( &hostDeviceStop );
cudaEventRecord( hostDeviceStart, 0 );
float *dev_imgDataBuffer;
cudaError_t errorOne = cudaMalloc((void**)&dev_imgDataBuffer, imgDataBufferSize*sizeof(float));
if(errorOne != cudaSuccess)
{
  printf("CUDA errorOne: %s\n", cudaGetErrorString(errorOne));
}
cudaMemcpy(dev_imgDataBuffer, imgDataBuffer, imgDataBufferSize*sizeof(float), cudaMemcpyHostToDevice);

int *dev_histo;
cudaMalloc((void**)&dev_histo, nbBinsPerDim*nbBinsPerDim*nbBinsPerDim*sizeof(int));

cudaMemset(dev_histo, 0, nbBinsPerDim*nbBinsPerDim*nbBinsPerDim*sizeof(int));
cudaEventRecord( hostDeviceStop, 0 );
cudaEventSynchronize( hostDeviceStop );
float hostDeviceElapsedTime;
cudaEventElapsedTime( &hostDeviceElapsedTime,hostDeviceStart, hostDeviceStop );
printf( "\nTime to transfer host to device:  %3.1f ms\n", hostDeviceElapsedTime );

int numPixPerThread = 1;
int numElemPerThread = numPixPerThread*3;
int histo_size = nbBinsPerDim*nbBinsPerDim*nbBinsPerDim;
double reqNumThreads = (((imgSize - 1)/numPixPerThread)+1);
size_t printBufferSize = 1048576*100;
cudaDeviceSetLimit(cudaLimitPrintfFifoSize, printBufferSize);
cudaEvent_t start,stop;
cudaEventCreate( &start );
cudaEventCreate( &stop );
cudaEventRecord( start, 0 );
histo_kernel<<<26, 32>>>(histo_size, reqNumThreads, numPixPerThread, numElemPerThread, imgDataBufferSize, dev_imgDataBuffer, nbBinsPerDim, binSize, dev_histo);
cudaEventRecord( stop, 0 );
cudaEventSynchronize( stop );
float elapsedTime;
cudaEventElapsedTime( &elapsedTime,start, stop );
printf( "Time to generate:  %3.1f ms\n", elapsedTime );
cudaThreadSynchronize();
cudaError_t error = cudaGetLastError();
if(error != cudaSuccess)
{
  // print the CUDA error message and exit
  printf("CUDA error: %s\n", cudaGetErrorString(error));
  printf("I am inside");
}
cudaEvent_t deviceToHostStart,deviceToHostStop;
cudaEventCreate( &deviceToHostStart );
cudaEventCreate( &deviceToHostStop );
cudaEventRecord( deviceToHostStart, 0 );
cudaMemcpy(count, dev_histo, nbBinsPerDim * nbBinsPerDim * nbBinsPerDim*sizeof(int), cudaMemcpyDeviceToHost);
cudaEventRecord( deviceToHostStop, 0 );
cudaEventSynchronize( deviceToHostStop );
float deviceToHostElapsedTime;
cudaEventElapsedTime( &deviceToHostElapsedTime,deviceToHostStart, deviceToHostStop );
printf( "\nTime to transfer device to host:  %3.1f ms\n", deviceToHostElapsedTime );
cudaFree(dev_histo);
cudaFree(dev_imgDataBuffer);
FILE *histoNonZeroCU;
histoNonZeroCU = fopen("histoNonZeroCU.txt", "a");
for(int i = 0; i < nbBinsPerDim * nbBinsPerDim * nbBinsPerDim; i++){
	if(count[i] != 0)
	fprintf(histoNonZeroCU, "%d) %d \n",i+1, count[i]);
}
fclose(histoNonZeroCU);


}
